(()=>{"use strict";const e=(()=>{const e=[],t=t=>{let n=e.find((e=>e.getName()===t));return n||(n=(e=>{let t=e,n=[];return{getName:()=>t,addHandler:e=>{n.push(e)},invokeHandlers:e=>{n.forEach((t=>{t(e)}))}}})(t),e.push(n)),n};return{publish:(e,n)=>{t(e).invokeHandlers(n)},subscribe:(e,n)=>{t(e).addHandler(n)}}})(),t=(()=>{const t=(e,t=null,n=null)=>{const i=document.createElement(e);return t&&t.forEach((e=>i.classList.add(e))),n&&(i.textContent=n),i},n=e=>e.classList.value.split(" ")[0],i=document.querySelector(".category-container"),s=document.querySelector(".add-category"),d=document.querySelector(".left-container .input-container"),o=document.getElementById("active-category");let c=null;const a=t=>{c&&c.classList.remove("active"),t.classList.add("active"),c=t;const i=n(t);o.textContent=i,e.publish("categoryActive",i)},r=e=>{const s=(e=>{const n=t("div",[e.getName(),"category"]);return n.appendChild(t("div",["text"],e.getName())),0!=i.childElementCount&&n.appendChild(t("div",["delete","btn"],"x")),n})(e);i.appendChild(s),(e=>{n(e);const t=e.lastChild;t.addEventListener("click",(e=>{e.stopPropagation(),l(t.parentNode)})),e.addEventListener("click",(()=>a(e)))})(s),a(s)},l=t=>{e.publish("removeCategory",n(t));const s=i.firstElementChild;t!=c&&c!=s||a(s),t.remove()},m=document.querySelector(".item-container"),u=document.querySelector(".add-item"),p=e=>{for(;m.childElementCount>0;)m.lastChild.remove();e.map((e=>g(e)))},g=e=>{const s=(e=>{const s=t("div",[e.categoryName,"item"]),d=document.createElement("input");return d.type="checkbox",e.isDone&&(s.classList.add("done"),d.checked=!0),s.appendChild(d),s.appendChild(t("div",["text"],e.content)),c==i.firstElementChild&&n(s)!=n(c)&&s.appendChild(t("div",["tag"],n(s))),s.appendChild(t("div",["delete","btn"],"x")),s})(e);m.appendChild(s),(e=>{const t=Array.from(e.children),n=t.find((e=>e.classList.contains("text"))).textContent,i=t.find((e=>e.classList.contains("delete"))),s=t.find((e=>"checkbox"==e.type));i.addEventListener("click",(()=>y(e,n))),s.addEventListener("click",(()=>h(s,n)))})(s)},y=(t,i)=>{t.remove(),e.publish("removeItem",{categoryName:n(t),itemContent:i})},h=(t,i)=>{const s=t.parentNode;t.checked?s.classList.add("done"):s.classList.remove("done"),e.publish("toggleDone",{categoryName:n(s),itemContent:i,isDone:t.checked})};return{init:()=>{s.addEventListener("click",(()=>{(()=>{let t,n,i;[t,n,i]=d.children,d.style.display="flex",s.style.display="none",t.value="",t.focus(),n.addEventListener("click",(()=>{e.publish("addCategory",t.value),d.style.display="none",s.style.display="block"}),{once:!0}),i.addEventListener("click",(()=>{d.style.display="none",s.style.display="block"}),{once:!0})})()})),e.subscribe("categoryAdded",r),u.addEventListener("click",(()=>{const t=c.firstChild.textContent,n=prompt("Enter");e.publish("addItem",{categoryName:t,itemContent:n})})),e.subscribe("categoryItemsLoaded",p),e.subscribe("itemAdded",g),e.publish("addCategory","All"),e.publish("addCategory","Random"),e.publish("addCategory","Categories"),a(i.firstElementChild)},setActive:a}})(),n=t;(()=>{const t=[],n=e=>t.find((t=>t.getName()===e)),i=i=>{if(n(i))return void alert("This category already exists!");const s=(e=>{let t=e,n=[];const i=e=>n.find((t=>t.content===e));return{getName:()=>t,addItem:(e,t)=>{const i=((e,t,n)=>({isDone:!1,content:t,categoryName:n}))(0,e,t);return n.push(i),i},removeItem:e=>{const t=i(e);if(null==t)return null;const s=n.indexOf(t);return n.splice(s,1),t},toggleDone:e=>{const t=i(e);t.isDone=!t.isDone},getItems:()=>n}})(i);t.push(s),e.publish("categoryAdded",s)},s=e=>{const i=t.indexOf(n(e));t.splice(i,1)},d=i=>{let s=[];i===t[0].getName()?t.map((e=>e.getItems().map((e=>s.push(e))))):s=n(i).getItems(),e.publish("categoryItemsLoaded",s)},o=({categoryName:t,itemContent:i})=>{const s=n(t).addItem(i,t);e.publish("itemAdded",s)},c=({categoryName:e,itemContent:t})=>{n(e).removeItem(t)},a=({categoryName:e,itemContent:t})=>{n(e).toggleDone(t)};return{init:()=>{e.subscribe("addCategory",i),e.subscribe("removeCategory",s),e.subscribe("categoryActive",d),e.subscribe("addItem",o),e.subscribe("removeItem",c),e.subscribe("toggleDone",a)}}})().init(),n.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,