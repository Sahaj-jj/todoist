(()=>{"use strict";const e=(()=>{const e=[],t=t=>{let d=e.find((e=>e.getName()===t));return d||(d=(e=>{let t=e,d=[];return{getName:()=>t,addHandler:e=>{d.push(e)},invokeHandlers:e=>{d.forEach((t=>{t(e)}))}}})(t),e.push(d)),d};return{publish:(e,d)=>{t(e).invokeHandlers(d)},subscribe:(e,d)=>{t(e).addHandler(d)}}})(),t=(()=>{const t=document.querySelector(".category-container"),d=document.querySelector(".add-category"),r=(e,t=null,d=null)=>{const r=document.createElement(e);return t&&t.forEach((e=>r.classList.add(e))),d&&(r.textContent=d),r},n=e=>{const d=t.lastChild.lastChild;d.addEventListener("click",(()=>{a(d.parentNode,e.getName())}))},i=e=>{t.appendChild((e=>{const t=r("div",["category"]);return t.appendChild(r("div",["text"],e)),t.appendChild(r("div",["delete","btn"],"x")),t})(e.getName()))},a=(t,d)=>{t.remove(),e.publish("categoryRemoved",d)};return{init:()=>{d.addEventListener("click",(()=>{e.publish("addCategory",prompt("Enter"))})),e.subscribe("categoryAdded",i),e.subscribe("categoryAdded",n)}}})(),d=(()=>{const t=[],d=e=>t.find((t=>t.getName()===e)),r=r=>{if(d(r))return void alert("This category already exists!");const n=(t=>{let d=t,r=[];return{getName:()=>d,addItem:t=>{r.push({id:r.length,content:t}),e.publish("itemAdded",r.slice(-1))}}})(r);t.push(n),e.publish("categoryAdded",n)},n=e=>{const r=t.indexOf(d(e));t.splice(r,1)};return{init:()=>{e.subscribe("addCategory",r),e.subscribe("categoryRemoved",n)}}})();t.init(),d.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,