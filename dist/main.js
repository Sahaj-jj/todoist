(()=>{"use strict";const e=(()=>{const e=[],t=t=>{let d=e.find((e=>e.getName()===t));return d||(d=(e=>{let t=e,d=[];return{getName:()=>t,addHandler:e=>{d.push(e)},invokeHandlers:e=>{d.forEach((t=>{t(e)}))}}})(t),e.push(d)),d};return{publish:(e,d)=>{t(e).invokeHandlers(d)},subscribe:(e,d)=>{t(e).addHandler(d)}}})(),t=(()=>{const t=document.querySelector(".category-container"),d=document.querySelector(".add-category");let n=null;const r=(e,t=null,d=null)=>{const n=document.createElement(e);return t&&t.forEach((e=>n.classList.add(e))),d&&(n.textContent=d),n},a=e=>{t.appendChild((e=>{const t=r("div",["category"]);return t.appendChild(r("div",["text"],e)),t.appendChild(r("div",["delete","btn"],"x")),t})(e.getName())),(e=>{const d=t.lastChild,r=d.lastChild;r.addEventListener("click",(()=>{i(r.parentNode,e.getName())})),d.addEventListener("click",(()=>{n&&n.classList.remove("active"),d.classList.add("active"),n=d}))})(e)},i=(t,d)=>{t.remove(),e.publish("categoryRemoved",d)};return{init:()=>{d.addEventListener("click",(()=>{e.publish("addCategory",prompt("Enter"))})),e.subscribe("categoryAdded",a)}}})(),d=(()=>{const t=[],d=e=>t.find((t=>t.getName()===e)),n=n=>{if(d(n))return void alert("This category already exists!");const r=(t=>{let d=t,n=[];return{getName:()=>d,addItem:t=>{n.push({id:n.length,content:t}),e.publish("itemAdded",n.slice(-1))}}})(n);t.push(r),e.publish("categoryAdded",r)},r=e=>{const n=t.indexOf(d(e));t.splice(n,1)};return{init:()=>{e.subscribe("addCategory",n),e.subscribe("categoryRemoved",r)}}})();t.init(),d.init(),e.publish("addCategory","All"),e.publish("addCategory","Random"),e.publish("addCategory","Categories")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFVBQWUsY0FBZSxPQUM5QixVQUFlLGNBQWUsVUFDOUIsVUFBZSxjQUFlLGUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvaXN0Ly4vc3JjL21vZHVsZXMvcHVic3ViLmpzIiwid2VicGFjazovL3RvZG9pc3QvLi9zcmMvbW9kdWxlcy9VSS5qcyIsIndlYnBhY2s6Ly90b2RvaXN0Ly4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9pc3QvLi9zcmMvbW9kdWxlcy9jYXRlZ29yeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuRXZlbnRzIDpcblxuYWRkSXRlbVxuaXRlbUFkZGVkXG5cbmFkZENhdGVnb3J5XG5yZW1vdmVDYXRlZ29yeVxudXBkYXRlQ2F0ZWdvcmllc1xuXG4qL1xuXG5cbmNvbnN0IF9FdmVudCA9IChldmVudE5hbWUpID0+IHtcbiAgICBsZXQgbmFtZSA9IGV2ZW50TmFtZTtcbiAgICBsZXQgaGFuZGxlcnMgPSBbXTtcblxuICAgIGNvbnN0IGdldE5hbWUgPSAoKSA9PiBuYW1lO1xuICAgIGNvbnN0IGFkZEhhbmRsZXIgPSAoaGFuZGxlcikgPT4ge1xuICAgICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0gICBcbiAgICBjb25zdCBpbnZva2VIYW5kbGVycyA9IChldmVudEFyZ3MpID0+IHtcbiAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChmbiA9PiB7XG4gICAgICAgICAgICBmbihldmVudEFyZ3MpO1xuICAgICAgICB9KVxuICAgIH1cbiAgICAgcmV0dXJuIHsgZ2V0TmFtZSwgYWRkSGFuZGxlciwgaW52b2tlSGFuZGxlcnMsfTtcbn1cblxuY29uc3QgUHViU3ViID0gKCgpID0+IHtcbiAgICBjb25zdCBfZXZlbnRzID0gW107XG5cbiAgICBjb25zdCBjaGVja0V2ZW50ICA9IChldmVudE5hbWUpID0+IHtcbiAgICAgICAgbGV0IGV2ZW50ID0gX2V2ZW50cy5maW5kKGV2ZW50ID0+IGV2ZW50LmdldE5hbWUoKSA9PT0gZXZlbnROYW1lKTtcbiAgICAgICAgaWYgKCFldmVudCkge1xuICAgICAgICAgICAgZXZlbnQgPSBfRXZlbnQoZXZlbnROYW1lKTtcbiAgICAgICAgICAgIF9ldmVudHMucHVzaChldmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGV2ZW50O1xuICAgIH1cblxuICAgIGNvbnN0IHB1Ymxpc2ggPSAoZXZlbnROYW1lLCBldmVudEFyZ3MpID0+IHtcbiAgICAgICAgY29uc3QgZXZlbnQgPSBjaGVja0V2ZW50KGV2ZW50TmFtZSk7XG4gICAgICAgIGV2ZW50Lmludm9rZUhhbmRsZXJzKGV2ZW50QXJncyk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3Vic2NyaWJlID0gKGV2ZW50TmFtZSwgaGFuZGxlcikgPT4ge1xuICAgICAgICBjb25zdCBldmVudCA9IGNoZWNrRXZlbnQoZXZlbnROYW1lKTtcbiAgICAgICAgZXZlbnQuYWRkSGFuZGxlcihoYW5kbGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBwdWJsaXNoLCBcbiAgICAgICAgc3Vic2NyaWJlLFxuICAgIH07XG5cbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IFB1YlN1YjsiLCJpbXBvcnQgUHViU3ViIGZyb20gXCIuL3B1YnN1YlwiO1xuXG5jb25zdCBVSSA9ICgoKSA9PiB7XG4gICAgY29uc3QgJGNhdGVnb3J5Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmNhdGVnb3J5LWNvbnRhaW5lcicpO1xuICAgIGNvbnN0ICRhZGRDYXRlZ29yeUJ0biA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5hZGQtY2F0ZWdvcnknKTtcbiAgICBsZXQgJGN1cnJlbnRBY3RpdmUgPSBudWxsO1xuXG4gICAgY29uc3QgY3JlYXRlSHRtbEVsZW1lbnQgPSAodHlwZSwgY2xhc3NBcnJheSA9IG51bGwsIGNvbnRlbnQgPSBudWxsKSA9PiB7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHR5cGUpO1xuICAgICAgICBpZiAoY2xhc3NBcnJheSkgY2xhc3NBcnJheS5mb3JFYWNoKGNscyA9PiBlbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xzKSk7XG4gICAgICAgIGlmIChjb250ZW50KSBlbGVtZW50LnRleHRDb250ZW50ID0gY29udGVudDtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgY29uc3QgbmV3Q2F0ZWdvcnkgPSAoY2F0ZWdvcnlOYW1lKSA9PiB7XG4gICAgICAgIGNvbnN0ICRjYXQgPSBjcmVhdGVIdG1sRWxlbWVudCgnZGl2JywgWydjYXRlZ29yeSddKTtcbiAgICAgICAgJGNhdC5hcHBlbmRDaGlsZChjcmVhdGVIdG1sRWxlbWVudCgnZGl2JywgWyd0ZXh0J10sIGNhdGVnb3J5TmFtZSkpO1xuICAgICAgICAkY2F0LmFwcGVuZENoaWxkKGNyZWF0ZUh0bWxFbGVtZW50KCdkaXYnLCBbJ2RlbGV0ZScsICdidG4nXSwgJ3gnKSk7XG4gICAgICAgIHJldHVybiAkY2F0O1xuICAgIH1cblxuICAgIGNvbnN0IGFkZExpc3RlbmVyID0gKGNhdCkgPT4ge1xuICAgICAgICBjb25zdCAkY2F0ZWdvcnkgPSAkY2F0ZWdvcnlDb250YWluZXIubGFzdENoaWxkO1xuICAgICAgICBjb25zdCAkZGVsZXRlYnRuID0gJGNhdGVnb3J5Lmxhc3RDaGlsZDtcbiAgICAgICAgJGRlbGV0ZWJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIHJlbW92ZUNhdGVnb3J5KCRkZWxldGVidG4ucGFyZW50Tm9kZSwgY2F0LmdldE5hbWUoKSk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgJGNhdGVnb3J5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgaWYgKCRjdXJyZW50QWN0aXZlKSAkY3VycmVudEFjdGl2ZS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICRjYXRlZ29yeS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICRjdXJyZW50QWN0aXZlID0gJGNhdGVnb3J5O1xuICAgICAgICB9KVxuICAgIH1cblxuICAgIGNvbnN0IGFkZENhdGVnb3J5ID0gKGNhdCkgPT4ge1xuICAgICAgICAkY2F0ZWdvcnlDb250YWluZXIuYXBwZW5kQ2hpbGQobmV3Q2F0ZWdvcnkoY2F0LmdldE5hbWUoKSkpO1xuICAgICAgICBhZGRMaXN0ZW5lcihjYXQpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbW92ZUNhdGVnb3J5ID0gKGNhdEVsZW1lbnQsIGNhdGVnb3J5TmFtZSkgPT4ge1xuICAgICAgICBjYXRFbGVtZW50LnJlbW92ZSgpO1xuICAgICAgICBQdWJTdWIucHVibGlzaCgnY2F0ZWdvcnlSZW1vdmVkJywgY2F0ZWdvcnlOYW1lKTtcbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmVDYXRlZ29yeSA9ICgpID0+IHtcblxuICAgIH1cblxuICAgIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgICAgICRhZGRDYXRlZ29yeUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIFB1YlN1Yi5wdWJsaXNoKCdhZGRDYXRlZ29yeScsIHByb21wdCgnRW50ZXInKSk7XG4gICAgICAgIH0pXG5cbiAgICAgICAgUHViU3ViLnN1YnNjcmliZSgnY2F0ZWdvcnlBZGRlZCcsIGFkZENhdGVnb3J5KTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0LFxuICAgIH07XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBVSTtcblxuXG5cbiIsImltcG9ydCBQdWJTdWIgZnJvbSBcIi4vbW9kdWxlcy9wdWJzdWJcIjtcbmltcG9ydCBVSSBmcm9tIFwiLi9tb2R1bGVzL1VJXCI7XG5pbXBvcnQgQ2F0ZWdvcnkgZnJvbSBcIi4vbW9kdWxlcy9jYXRlZ29yeVwiXG5cbi8vIGZ1bmN0aW9uIHRlc3QoKSB7XG4vLyAgICAgY29uc3QgY2F0ID0gQ2F0ZWdvcnkoJ2hpJyk7XG5cbi8vICAgICBQdWJTdWIuc3Vic2NyaWJlKCdhZGRJdGVtJywgY2F0LmFkZEl0ZW0pO1xuLy8gICAgIFB1YlN1Yi5wdWJsaXNoKCdhZGRJdGVtJywgJ3Rlc3QnKTtcbi8vIH1cblxuLy8gdGVzdCgpO1xuXG5cbmNvbnN0IENhdGVnb3J5Q29udHJvbGxlciA9ICgoKSA9PiB7XG5cbiAgICBjb25zdCBjYXRlZ29yaWVzID0gW107XG5cbiAgICBjb25zdCBnZXRDYXRlZ29yeSA9IChjYXRlZ29yeU5hbWUpID0+IHtcbiAgICAgICAgcmV0dXJuIGNhdGVnb3JpZXMuZmluZChjYXQgPT4gY2F0LmdldE5hbWUoKSA9PT0gY2F0ZWdvcnlOYW1lKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgYWRkQ2F0ZWdvcnkgPSAoY2F0ZWdvcnlOYW1lKSA9PiB7XG4gICAgICAgIGlmIChnZXRDYXRlZ29yeShjYXRlZ29yeU5hbWUpKSB7XG4gICAgICAgICAgICBhbGVydCgnVGhpcyBjYXRlZ29yeSBhbHJlYWR5IGV4aXN0cyEnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYXQgPSBDYXRlZ29yeShjYXRlZ29yeU5hbWUpO1xuICAgICAgICBjYXRlZ29yaWVzLnB1c2goY2F0KTtcbiAgICAgICAgUHViU3ViLnB1Ymxpc2goJ2NhdGVnb3J5QWRkZWQnLCBjYXQpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbW92ZUNhdGVnb3J5ID0gKGNhdGVnb3J5TmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IGNhdGVnb3JpZXMuaW5kZXhPZihnZXRDYXRlZ29yeShjYXRlZ29yeU5hbWUpKTtcbiAgICAgICAgY2F0ZWdvcmllcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cblxuICAgIGNvbnN0IGluaXQgPSAoKSA9PiB7XG4gICAgICAgIFB1YlN1Yi5zdWJzY3JpYmUoJ2FkZENhdGVnb3J5JywgYWRkQ2F0ZWdvcnkpO1xuICAgICAgICBQdWJTdWIuc3Vic2NyaWJlKCdjYXRlZ29yeVJlbW92ZWQnLCByZW1vdmVDYXRlZ29yeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgaW5pdCxcbiAgICB9O1xufSkoKTtcblxuVUkuaW5pdCgpO1xuQ2F0ZWdvcnlDb250cm9sbGVyLmluaXQoKTtcblxuUHViU3ViLnB1Ymxpc2goJ2FkZENhdGVnb3J5JywgJ0FsbCcpO1xuUHViU3ViLnB1Ymxpc2goJ2FkZENhdGVnb3J5JywgJ1JhbmRvbScpO1xuUHViU3ViLnB1Ymxpc2goJ2FkZENhdGVnb3J5JywgJ0NhdGVnb3JpZXMnKTtcblxuXG5cblxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tIFwiLi9wdWJzdWJcIjtcblxuY29uc3QgSXRlbSA9IChpZCwgY29udGVudCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlkLFxuICAgICAgICBjb250ZW50LFxuICAgIH07XG59XG5cbmNvbnN0IENhdGVnb3J5ID0gKGNhdGVnb3J5TmFtZSkgPT4ge1xuICAgIGxldCBuYW1lID0gY2F0ZWdvcnlOYW1lO1xuICAgIGxldCBpdGVtcyA9IFtdO1xuXG4gICAgY29uc3QgZ2V0TmFtZSA9ICgpID0+IG5hbWU7XG5cbiAgICBjb25zdCBhZGRJdGVtID0gKGl0ZW1Db250ZW50KSA9PiB7XG4gICAgICAgIGl0ZW1zLnB1c2goSXRlbShpdGVtcy5sZW5ndGgsIGl0ZW1Db250ZW50KSk7XG4gICAgICAgIFB1YlN1Yi5wdWJsaXNoKCdpdGVtQWRkZWQnLCBpdGVtcy5zbGljZSgtMSkpO1xuICAgIH1cblxuICAgIC8vIGNvbnN0IHJlbW92ZUl0ZW0gPSAoaXRlbSkgPT4ge1xuICAgIC8vICAgICBcbiAgICAvLyB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBnZXROYW1lLFxuICAgICAgICBhZGRJdGVtLFxuICAgIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IENhdGVnb3J5OyJdLCJuYW1lcyI6WyJfZXZlbnRzIiwiY2hlY2tFdmVudCIsImV2ZW50TmFtZSIsImV2ZW50IiwiZmluZCIsImdldE5hbWUiLCJuYW1lIiwiaGFuZGxlcnMiLCJhZGRIYW5kbGVyIiwiaGFuZGxlciIsInB1c2giLCJpbnZva2VIYW5kbGVycyIsImV2ZW50QXJncyIsImZvckVhY2giLCJmbiIsIl9FdmVudCIsInB1Ymxpc2giLCJzdWJzY3JpYmUiLCIkY2F0ZWdvcnlDb250YWluZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCIkYWRkQ2F0ZWdvcnlCdG4iLCIkY3VycmVudEFjdGl2ZSIsImNyZWF0ZUh0bWxFbGVtZW50IiwidHlwZSIsImNsYXNzQXJyYXkiLCJjb250ZW50IiwiZWxlbWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjbHMiLCJjbGFzc0xpc3QiLCJhZGQiLCJ0ZXh0Q29udGVudCIsImFkZENhdGVnb3J5IiwiY2F0IiwiYXBwZW5kQ2hpbGQiLCJjYXRlZ29yeU5hbWUiLCIkY2F0IiwibmV3Q2F0ZWdvcnkiLCIkY2F0ZWdvcnkiLCJsYXN0Q2hpbGQiLCIkZGVsZXRlYnRuIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUNhdGVnb3J5IiwicGFyZW50Tm9kZSIsInJlbW92ZSIsImFkZExpc3RlbmVyIiwiY2F0RWxlbWVudCIsImluaXQiLCJwcm9tcHQiLCJDYXRlZ29yeUNvbnRyb2xsZXIiLCJjYXRlZ29yaWVzIiwiZ2V0Q2F0ZWdvcnkiLCJhbGVydCIsIml0ZW1zIiwiYWRkSXRlbSIsIml0ZW1Db250ZW50IiwiaWQiLCJsZW5ndGgiLCJzbGljZSIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSJdLCJzb3VyY2VSb290IjoiIn0=