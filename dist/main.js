(()=>{"use strict";const e=(()=>{const e=[],t=t=>{let n=e.find((e=>e.getName()===t));return n||(n=(e=>{let t=e,n=[];return{getName:()=>t,addHandler:e=>{n.push(e)},invokeHandlers:e=>{n.forEach((t=>{t(e)}))}}})(t),e.push(n)),n};return{publish:(e,n)=>{t(e).invokeHandlers(n)},subscribe:(e,n)=>{t(e).addHandler(n)}}})(),t=(()=>{const t=(e,t=null,n=null)=>{const i=document.createElement(e);return t&&t.forEach((e=>i.classList.add(e))),n&&(i.textContent=n),i},n=e=>e.classList.value.split(" ")[0],i=document.querySelector(".category-container"),d=document.querySelector(".add-category"),o=document.getElementById("active-category");let s=null;const a=t=>{s&&s.classList.remove("active"),t.classList.add("active"),s=t;const i=n(t);o.textContent=i,e.publish("categoryActive",i)},c=e=>{const d=(e=>{const n=t("div",[e.getName(),"category"]);return n.appendChild(t("div",["text"],e.getName())),0!=i.childElementCount&&n.appendChild(t("div",["delete","btn"],"x")),n})(e);i.appendChild(d),(e=>{n(e);const t=e.lastChild;t.addEventListener("click",(e=>{e.stopPropagation(),r(t.parentNode)})),e.addEventListener("click",(()=>a(e)))})(d),a(d)},r=t=>{t==s&&a(i.firstElementChild),t.remove(),e.publish("removeCategory",n(t))},l=document.querySelector(".item-container"),m=document.querySelector(".add-item"),u=e=>{for(;l.childElementCount>0;)l.lastChild.remove();e.map((e=>p(e)))},p=e=>{const n=(e=>{const n=t("div",["item"]),i=document.createElement("input");return i.type="checkbox",e.isDone&&(n.classList.add("done"),i.checked=!0),n.appendChild(i),n.appendChild(t("div",["text"],e.content)),n.appendChild(t("div",["delete","btn"],"x")),n})(e);l.appendChild(n),(e=>{const t=Array.from(e.children),n=t.find((e=>e.classList.contains("text"))).textContent,i=t.find((e=>e.classList.contains("delete"))),d=t.find((e=>"checkbox"==e.type));i.addEventListener("click",(()=>g(e,n))),d.addEventListener("click",(()=>h(d,n)))})(n)},g=(t,i)=>{t.remove(),e.publish("removeItem",{activeCategoryName:n(s),itemContent:i})},h=(t,i)=>{const d=t.parentNode;t.checked?d.classList.add("done"):d.classList.remove("done"),e.publish("toggleDone",{activeCategoryName:n(s),itemContent:i,isDone:t.checked})};return{init:()=>{d.addEventListener("click",(()=>{e.publish("addCategory",prompt("Enter"))})),e.subscribe("categoryAdded",c),m.addEventListener("click",(()=>{const t=s.firstChild.textContent,n=prompt("Enter");e.publish("addItem",{activeCategoryName:t,itemContent:n})})),e.subscribe("categoryItemsLoaded",u),e.subscribe("itemAdded",p),e.publish("addCategory","All"),e.publish("addCategory","Random"),e.publish("addCategory","Categories"),a(i.firstElementChild)},setActive:a}})(),n=t;(()=>{const t=[],n=e=>t.find((t=>t.getName()===e)),i=i=>{if(n(i))return void alert("This category already exists!");const d=(e=>{let t=e,n=[];const i=e=>n.find((t=>t.content===e));return{getName:()=>t,addItem:e=>{const t={isDone:!1,content:e};return n.push(t),t},removeItem:e=>{const t=i(e),d=n.indexOf(t);n.splice(d,1)},toggleDone:e=>{const t=i(e);t.isDone=!t.isDone},getItems:()=>n}})(i);t.push(d),e.publish("categoryAdded",d)},d=e=>{const i=t.indexOf(n(e));t.splice(i,1)},o=i=>{let d=[];i===t[0].getName()?t.map((e=>{e.getItems().map((e=>d.push(e)))})):d=n(i).getItems(),e.publish("categoryItemsLoaded",d)},s=({activeCategoryName:t,itemContent:i})=>{const d=n(t).addItem(i);e.publish("itemAdded",d)},a=({activeCategoryName:e,itemContent:t})=>{n(e).removeItem(t)},c=({activeCategoryName:e,itemContent:t})=>{n(e).toggleDone(t)};return{init:()=>{e.subscribe("addCategory",i),e.subscribe("removeCategory",d),e.subscribe("categoryActive",o),e.subscribe("addItem",s),e.subscribe("removeItem",a),e.subscribe("toggleDone",c)}}})().init(),n.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,