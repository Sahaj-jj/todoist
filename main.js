(()=>{"use strict";const e=(()=>{const e=[],t=t=>{let n=e.find((e=>e.getName()===t));return n||(n=(e=>{let t=e,n=[];return{getName:()=>t,addHandler:e=>{n.push(e)},invokeHandlers:e=>{n.forEach((t=>{t(e)}))}}})(t),e.push(n)),n};return{publish:(e,n)=>{t(e).invokeHandlers(n)},subscribe:(e,n)=>{t(e).addHandler(n)}}})(),t=(()=>{const t=(e,t=null,n=null)=>{const d=document.createElement(e);return t&&t.forEach((e=>d.classList.add(e))),n&&(d.textContent=n),d},n=e=>e.classList.value.split(" ")[0],d=document.querySelector(".category-container"),i=document.querySelector(".add-category"),o=document.getElementById("active-category");let s=null;const c=t=>{s&&s.classList.remove("active"),t.classList.add("active"),s=t;const d=n(t);o.textContent=d,e.publish("categoryActive",d)},r=e=>{const i=(e=>{const n=t("div",[e.getName(),"category"]);return n.appendChild(t("div",["text"],e.getName())),0!=d.childElementCount&&n.appendChild(t("div",["delete","btn"],"x")),n})(e);d.appendChild(i),(e=>{n(e);const t=e.lastChild;t.addEventListener("click",(e=>{e.stopPropagation(),a(t.parentNode)})),e.addEventListener("click",(()=>c(e)))})(i),c(i)},a=t=>{e.publish("removeCategory",n(t));const i=d.firstElementChild;t!=s&&s!=i||c(i),t.remove()},l=document.querySelector(".item-container"),m=document.querySelector(".add-item"),u=e=>{for(;l.childElementCount>0;)l.lastChild.remove();e.map((e=>p(e)))},p=e=>{const i=(e=>{const i=t("div",[e.categoryName,"item"]),o=document.createElement("input");return o.type="checkbox",e.isDone&&(i.classList.add("done"),o.checked=!0),i.appendChild(o),i.appendChild(t("div",["text"],e.content)),s==d.firstElementChild&&i.appendChild(t("div",["tag"],n(i))),i.appendChild(t("div",["delete","btn"],"x")),i})(e);l.appendChild(i),(e=>{const t=Array.from(e.children),n=t.find((e=>e.classList.contains("text"))).textContent,d=t.find((e=>e.classList.contains("delete"))),i=t.find((e=>"checkbox"==e.type));d.addEventListener("click",(()=>g(e,n))),i.addEventListener("click",(()=>h(i,n)))})(i)},g=(t,d)=>{t.remove(),e.publish("removeItem",{categoryName:n(t),itemContent:d})},h=(t,d)=>{const i=t.parentNode;t.checked?i.classList.add("done"):i.classList.remove("done"),e.publish("toggleDone",{categoryName:n(i),itemContent:d,isDone:t.checked})};return{init:()=>{i.addEventListener("click",(()=>{e.publish("addCategory",prompt("Enter"))})),e.subscribe("categoryAdded",r),m.addEventListener("click",(()=>{const t=s.firstChild.textContent,n=prompt("Enter");e.publish("addItem",{categoryName:t,itemContent:n})})),e.subscribe("categoryItemsLoaded",u),e.subscribe("itemAdded",p),e.publish("addCategory","All"),e.publish("addCategory","Random"),e.publish("addCategory","Categories"),c(d.firstElementChild)},setActive:c}})(),n=t;(()=>{const t=[],n=e=>t.find((t=>t.getName()===e)),d=d=>{if(n(d))return void alert("This category already exists!");const i=(e=>{let t=e,n=[];const d=e=>n.find((t=>t.content===e));return{getName:()=>t,addItem:(e,t)=>{const d=((e,t,n)=>({isDone:!1,content:t,categoryName:n}))(0,e,t);return n.push(d),d},removeItem:e=>{const t=d(e);if(null==t)return null;const i=n.indexOf(t);return n.splice(i,1),t},toggleDone:e=>{const t=d(e);t.isDone=!t.isDone},getItems:()=>n}})(d);t.push(i),e.publish("categoryAdded",i)},i=e=>{const d=t.indexOf(n(e));t.splice(d,1)},o=d=>{let i=[];d===t[0].getName()?t.map((e=>e.getItems().map((e=>i.push(e))))):i=n(d).getItems(),e.publish("categoryItemsLoaded",i)},s=({categoryName:t,itemContent:d})=>{const i=n(t).addItem(d,t);e.publish("itemAdded",i)},c=({categoryName:e,itemContent:t})=>{n(e).removeItem(t)},r=({categoryName:e,itemContent:t})=>{n(e).toggleDone(t)};return{init:()=>{e.subscribe("addCategory",d),e.subscribe("removeCategory",i),e.subscribe("categoryActive",o),e.subscribe("addItem",s),e.subscribe("removeItem",c),e.subscribe("toggleDone",r)}}})().init(),n.init()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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UUFBVUwsRUFBS0ssUUFVcEI4QixTQVBhLElBQU1yQyxJRGpCUCxDQUFTckIsR0FDckI0QyxFQUFXN0UsS0FBSytFLEdBQ2hCLFVBQWUsZ0JBQWlCQSxJQUc5QmEsRUFBa0IzRCxJQUNwQixNQUFNc0QsRUFBUVYsRUFBV1csUUFBUVYsRUFBWTdDLElBQzdDNEMsRUFBV1ksT0FBT0YsRUFBTyxJQUt2QkksRUFBWTFELElBQ2QsSUFBSXFCLEVBQVEsR0FDUnJCLElBQWlCNEMsRUFBVyxHQUFHbEYsVUFDL0JrRixFQUFXdEIsS0FBSXdCLEdBQU9BLEVBQUlZLFdBQVdwQyxLQUFJQyxHQUFRRixFQUFNdEQsS0FBS3dELE9BRTNERixFQUFRd0IsRUFBWTdDLEdBQWMwRCxXQUN2QyxVQUFlLHNCQUF1QnJDLElBR3BDNkIsRUFBVSxFQUFFbEQsYUFBQUEsRUFBY21DLFlBQUFBLE1BQzVCLE1BQU1aLEVBQU9zQixFQUFZN0MsR0FBY2tELFFBQVFmLEVBQWFuQyxHQUM1RCxVQUFlLFlBQWF1QixJQUcxQjZCLEVBQWEsRUFBRXBELGFBQUFBLEVBQWNtQyxZQUFBQSxNQUMvQlUsRUFBWTdDLEdBQWNvRCxXQUFXakIsSUFHbkNzQixFQUFhLEVBQUV6RCxhQUFBQSxFQUFjbUMsWUFBQUEsTUFDL0JVLEVBQVk3QyxHQUFjeUQsV0FBV3RCLElBYXpDLE1BQU8sQ0FDSE0sS0FYUyxLQUNULFlBQWlCLGNBQWVNLEdBQ2hDLFlBQWlCLGlCQUFrQlksR0FFbkMsWUFBaUIsaUJBQWtCRCxHQUNuQyxZQUFpQixVQUFXUixHQUM1QixZQUFpQixhQUFjRSxHQUMvQixZQUFpQixhQUFjSyxNQXhEWixHQWdFUmhCLE9BQ25CLFUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly90b2RvaXN0Ly4vc3JjL21vZHVsZXMvcHVic3ViLmpzIiwid2VicGFjazovL3RvZG9pc3QvLi9zcmMvbW9kdWxlcy9VSS5qcyIsIndlYnBhY2s6Ly90b2RvaXN0Ly4vc3JjL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9pc3QvLi9zcmMvbW9kdWxlcy9jYXRlZ29yeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuRXZlbnRzIDpcblxuYWRkSXRlbVxuaXRlbUFkZGVkXG5cbmFkZENhdGVnb3J5XG5yZW1vdmVDYXRlZ29yeVxuY2F0ZWdvcnlBZGRlZFxuY2F0ZWdvcnlSZW1vdmVkXG5cbiovXG5cblxuY29uc3QgX0V2ZW50ID0gKGV2ZW50TmFtZSkgPT4ge1xuICAgIGxldCBuYW1lID0gZXZlbnROYW1lO1xuICAgIGxldCBoYW5kbGVycyA9IFtdO1xuXG4gICAgY29uc3QgZ2V0TmFtZSA9ICgpID0+IG5hbWU7XG4gICAgY29uc3QgYWRkSGFuZGxlciA9IChoYW5kbGVyKSA9PiB7XG4gICAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSAgIFxuICAgIGNvbnN0IGludm9rZUhhbmRsZXJzID0gKGV2ZW50QXJncykgPT4ge1xuICAgICAgICBoYW5kbGVycy5mb3JFYWNoKGZuID0+IHtcbiAgICAgICAgICAgIGZuKGV2ZW50QXJncyk7XG4gICAgICAgIH0pXG4gICAgfVxuICAgICByZXR1cm4geyBnZXROYW1lLCBhZGRIYW5kbGVyLCBpbnZva2VIYW5kbGVycyx9O1xufVxuXG5jb25zdCBQdWJTdWIgPSAoKCkgPT4ge1xuICAgIGNvbnN0IF9ldmVudHMgPSBbXTtcblxuICAgIGNvbnN0IGNoZWNrRXZlbnQgID0gKGV2ZW50TmFtZSkgPT4ge1xuICAgICAgICBsZXQgZXZlbnQgPSBfZXZlbnRzLmZpbmQoZXZlbnQgPT4gZXZlbnQuZ2V0TmFtZSgpID09PSBldmVudE5hbWUpO1xuICAgICAgICBpZiAoIWV2ZW50KSB7XG4gICAgICAgICAgICBldmVudCA9IF9FdmVudChldmVudE5hbWUpO1xuICAgICAgICAgICAgX2V2ZW50cy5wdXNoKGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZXZlbnQ7XG4gICAgfVxuXG4gICAgY29uc3QgcHVibGlzaCA9IChldmVudE5hbWUsIGV2ZW50QXJncykgPT4ge1xuICAgICAgICBjb25zdCBldmVudCA9IGNoZWNrRXZlbnQoZXZlbnROYW1lKTtcbiAgICAgICAgZXZlbnQuaW52b2tlSGFuZGxlcnMoZXZlbnRBcmdzKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdWJzY3JpYmUgPSAoZXZlbnROYW1lLCBoYW5kbGVyKSA9PiB7XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gY2hlY2tFdmVudChldmVudE5hbWUpO1xuICAgICAgICBldmVudC5hZGRIYW5kbGVyKGhhbmRsZXIpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHB1Ymxpc2gsIFxuICAgICAgICBzdWJzY3JpYmUsXG4gICAgfTtcblxufSkoKTtcblxuZXhwb3J0IGRlZmF1bHQgUHViU3ViOyIsImltcG9ydCBQdWJTdWIgZnJvbSBcIi4vcHVic3ViXCI7XG5cbmNvbnN0IFVJID0gKCgpID0+IHtcblxuICAgIC8qXG4gICAgVXRpbFxuICAgICovXG5cbiAgICBjb25zdCBjcmVhdGVIdG1sRWxlbWVudCA9ICh0eXBlLCBjbGFzc0FycmF5ID0gbnVsbCwgY29udGVudCA9IG51bGwpID0+IHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodHlwZSk7XG4gICAgICAgIGlmIChjbGFzc0FycmF5KSBjbGFzc0FycmF5LmZvckVhY2goY2xzID0+IGVsZW1lbnQuY2xhc3NMaXN0LmFkZChjbHMpKTtcbiAgICAgICAgaWYgKGNvbnRlbnQpIGVsZW1lbnQudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICByZXR1cm4gZWxlbWVudDtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRDYXRlZ29yeU5hbWUgPSAoJGVsZW1lbnQpID0+IHtcbiAgICAgICAgcmV0dXJuICRlbGVtZW50LmNsYXNzTGlzdC52YWx1ZS5zcGxpdCgnICcpWzBdO1xuICAgIH1cblxuICAgIC8qXG4gICAgQ2F0ZWdvcmllcyBVSVxuICAgICovXG5cbiAgICBjb25zdCAkY2F0ZWdvcnlDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY2F0ZWdvcnktY29udGFpbmVyJyk7XG4gICAgY29uc3QgJGFkZENhdGVnb3J5QnRuID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmFkZC1jYXRlZ29yeScpO1xuICAgIGNvbnN0ICRhY3RpdmVDYXRlZ29yeSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhY3RpdmUtY2F0ZWdvcnknKTtcbiAgICBsZXQgJGN1cnJlbnRBY3RpdmUgPSBudWxsO1xuXG4gICAgY29uc3QgbmV3Q2F0ZWdvcnkgPSAoY2F0ZWdvcnkpID0+IHtcbiAgICAgICAgY29uc3QgJGNhdCA9IGNyZWF0ZUh0bWxFbGVtZW50KCdkaXYnLCBbY2F0ZWdvcnkuZ2V0TmFtZSgpLCAnY2F0ZWdvcnknXSk7XG4gICAgICAgICRjYXQuYXBwZW5kQ2hpbGQoY3JlYXRlSHRtbEVsZW1lbnQoJ2RpdicsIFsndGV4dCddLCBjYXRlZ29yeS5nZXROYW1lKCkpKTtcbiAgICAgICAgaWYgKCRjYXRlZ29yeUNvbnRhaW5lci5jaGlsZEVsZW1lbnRDb3VudCAhPSAwKVxuICAgICAgICAgICAgJGNhdC5hcHBlbmRDaGlsZChjcmVhdGVIdG1sRWxlbWVudCgnZGl2JywgWydkZWxldGUnLCAnYnRuJ10sICd4JykpO1xuICAgICAgICByZXR1cm4gJGNhdDtcbiAgICB9XG5cbiAgICBjb25zdCBhZGRDYXRlZ29yeUxpc3RlbmVyID0gKCRjYXRlZ29yeSkgPT4ge1xuICAgICAgICBjb25zdCBjYXRlZ29yeU5hbWUgPSBnZXRDYXRlZ29yeU5hbWUoJGNhdGVnb3J5KTtcbiAgICAgICAgY29uc3QgJGRlbGV0ZUJ0biA9ICRjYXRlZ29yeS5sYXN0Q2hpbGQ7XG5cbiAgICAgICAgJGRlbGV0ZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChlKSA9PiB7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICAgICAgcmVtb3ZlQ2F0ZWdvcnlET00oJGRlbGV0ZUJ0bi5wYXJlbnROb2RlKTtcbiAgICAgICAgfSlcblxuICAgICAgICAkY2F0ZWdvcnkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBzZXRBY3RpdmUoJGNhdGVnb3J5KSk7XG4gICAgfVxuXG4gICAgY29uc3Qgc2V0QWN0aXZlID0gKCRjYXRlZ29yeSkgPT4ge1xuICAgICAgICBpZiAoJGN1cnJlbnRBY3RpdmUpICRjdXJyZW50QWN0aXZlLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICAkY2F0ZWdvcnkuY2xhc3NMaXN0LmFkZCgnYWN0aXZlJyk7XG4gICAgICAgICRjdXJyZW50QWN0aXZlID0gJGNhdGVnb3J5O1xuICAgICAgICBjb25zdCBjYXRlZ29yeU5hbWUgPSBnZXRDYXRlZ29yeU5hbWUoJGNhdGVnb3J5KTtcbiAgICAgICAgJGFjdGl2ZUNhdGVnb3J5LnRleHRDb250ZW50ID0gY2F0ZWdvcnlOYW1lO1xuICAgICAgICBQdWJTdWIucHVibGlzaCgnY2F0ZWdvcnlBY3RpdmUnLCBjYXRlZ29yeU5hbWUpO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZENhdGVnb3J5RE9NID0gKGNhdGVnb3J5KSA9PiB7XG4gICAgICAgIGNvbnN0ICRuZXdDYXRlZ29yeSA9IG5ld0NhdGVnb3J5KGNhdGVnb3J5KTtcbiAgICAgICAgJGNhdGVnb3J5Q29udGFpbmVyLmFwcGVuZENoaWxkKCRuZXdDYXRlZ29yeSk7XG4gICAgICAgIGFkZENhdGVnb3J5TGlzdGVuZXIoJG5ld0NhdGVnb3J5KTtcbiAgICAgICAgc2V0QWN0aXZlKCRuZXdDYXRlZ29yeSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVtb3ZlQ2F0ZWdvcnlET00gPSAoJGNhdGVnb3J5KSA9PiB7XG4gICAgICAgIFB1YlN1Yi5wdWJsaXNoKCdyZW1vdmVDYXRlZ29yeScsIGdldENhdGVnb3J5TmFtZSgkY2F0ZWdvcnkpKTtcbiAgICAgICAgY29uc3QgJGZpcnN0Q2F0ZWdvcnkgPSAkY2F0ZWdvcnlDb250YWluZXIuZmlyc3RFbGVtZW50Q2hpbGQ7XG4gICAgICAgIGlmICgkY2F0ZWdvcnkgPT0gJGN1cnJlbnRBY3RpdmUgfHwgJGN1cnJlbnRBY3RpdmUgPT0gJGZpcnN0Q2F0ZWdvcnkpIFxuICAgICAgICAgICAgc2V0QWN0aXZlKCRmaXJzdENhdGVnb3J5KTtcbiAgICAgICAgJGNhdGVnb3J5LnJlbW92ZSgpO1xuICAgIH1cblxuICAgIC8qXG4gICAgSXRlbXMgVUlcbiAgICAqL1xuICAgIFxuICAgIGNvbnN0ICRpdGVtQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLml0ZW0tY29udGFpbmVyJyk7XG4gICAgY29uc3QgJGFkZEl0ZW1CdG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuYWRkLWl0ZW0nKTtcblxuICAgIGNvbnN0IG5ld0l0ZW1ET00gPSAoaXRlbSkgPT4ge1xuICAgICAgICBjb25zdCAkaXRlbSA9IGNyZWF0ZUh0bWxFbGVtZW50KCdkaXYnLCBbaXRlbS5jYXRlZ29yeU5hbWUsICdpdGVtJ10pO1xuICAgICAgICBjb25zdCAkY2hlY2tCb3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbnB1dCcpO1xuICAgICAgICAkY2hlY2tCb3gudHlwZSA9ICdjaGVja2JveCc7XG4gICAgICAgIGlmIChpdGVtLmlzRG9uZSkge1xuICAgICAgICAgICAgJGl0ZW0uY2xhc3NMaXN0LmFkZCgnZG9uZScpO1xuICAgICAgICAgICAgJGNoZWNrQm94LmNoZWNrZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgICRpdGVtLmFwcGVuZENoaWxkKCRjaGVja0JveCk7XG4gICAgICAgICRpdGVtLmFwcGVuZENoaWxkKGNyZWF0ZUh0bWxFbGVtZW50KCdkaXYnLCBbJ3RleHQnXSwgaXRlbS5jb250ZW50KSk7XG4gICAgICAgIGlmICgkY3VycmVudEFjdGl2ZSA9PSAkY2F0ZWdvcnlDb250YWluZXIuZmlyc3RFbGVtZW50Q2hpbGQpIHtcbiAgICAgICAgICAgICRpdGVtLmFwcGVuZENoaWxkKGNyZWF0ZUh0bWxFbGVtZW50KCdkaXYnLCBbJ3RhZyddLCBnZXRDYXRlZ29yeU5hbWUoJGl0ZW0pKSk7XG4gICAgICAgIH1cbiAgICAgICAgJGl0ZW0uYXBwZW5kQ2hpbGQoY3JlYXRlSHRtbEVsZW1lbnQoJ2RpdicsIFsnZGVsZXRlJywgJ2J0biddLCAneCcpKTtcbiAgICAgICAgcmV0dXJuICRpdGVtO1xuICAgIH1cblxuICAgIGNvbnN0IHNob3dJdGVtcyA9IChpdGVtcykgPT4ge1xuICAgICAgICB3aGlsZSgkaXRlbUNvbnRhaW5lci5jaGlsZEVsZW1lbnRDb3VudCA+IDApIFxuICAgICAgICAgICAgJGl0ZW1Db250YWluZXIubGFzdENoaWxkLnJlbW92ZSgpOyAgLy8gQ2xlYXIgY29udGVudHNcblxuICAgICAgICBpdGVtcy5tYXAoaXRlbSA9PiBhZGRJdGVtRE9NKGl0ZW0pKTtcbiAgICB9XG5cbiAgICBjb25zdCBhZGRJdGVtTGlzdGVuZXIgPSAoJGl0ZW0pID0+IHtcbiAgICAgICAgY29uc3QgaXRlbUVsZW1lbnRzID0gQXJyYXkuZnJvbSgkaXRlbS5jaGlsZHJlbik7XG4gICAgICAgIGNvbnN0IGl0ZW1Db250ZW50ID0gaXRlbUVsZW1lbnRzLmZpbmQoZWwgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZXh0JykpLnRleHRDb250ZW50O1xuICAgICAgICBjb25zdCAkZGVsZXRlQnRuID0gaXRlbUVsZW1lbnRzLmZpbmQoZWwgPT4gZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdkZWxldGUnKSk7XG4gICAgICAgIGNvbnN0ICRjaGVja0JveCA9IGl0ZW1FbGVtZW50cy5maW5kKGVsID0+IGVsLnR5cGUgPT0gJ2NoZWNrYm94Jyk7XG4gICAgICAgIFxuICAgICAgICAkZGVsZXRlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gcmVtb3ZlSXRlbURPTSgkaXRlbSwgaXRlbUNvbnRlbnQpKTtcbiAgICAgICAgJGNoZWNrQm94LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdG9nZ2xlRG9uZURPTSgkY2hlY2tCb3gsIGl0ZW1Db250ZW50KSk7XG4gICAgfVxuXG4gICAgY29uc3QgYWRkSXRlbURPTSA9IChpdGVtKSA9PiB7XG4gICAgICAgIGNvbnN0ICRuZXdJdGVtID0gbmV3SXRlbURPTShpdGVtKTtcbiAgICAgICAgJGl0ZW1Db250YWluZXIuYXBwZW5kQ2hpbGQoJG5ld0l0ZW0pO1xuICAgICAgICBhZGRJdGVtTGlzdGVuZXIoJG5ld0l0ZW0pO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbW92ZUl0ZW1ET00gPSAoJGl0ZW0sIGl0ZW1Db250ZW50KSA9PiB7XG4gICAgICAgICRpdGVtLnJlbW92ZSgpO1xuICAgICAgICBQdWJTdWIucHVibGlzaCgncmVtb3ZlSXRlbScsIHtjYXRlZ29yeU5hbWU6IGdldENhdGVnb3J5TmFtZSgkaXRlbSksIGl0ZW1Db250ZW50fSk7XG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlRG9uZURPTSA9ICgkY2hlY2tCb3gsIGl0ZW1Db250ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0ICRpdGVtID0gJGNoZWNrQm94LnBhcmVudE5vZGU7XG4gICAgICAgICRjaGVja0JveC5jaGVja2VkID8gJGl0ZW0uY2xhc3NMaXN0LmFkZCgnZG9uZScpIDogJGl0ZW0uY2xhc3NMaXN0LnJlbW92ZSgnZG9uZScpO1xuICAgICAgICBQdWJTdWIucHVibGlzaCgndG9nZ2xlRG9uZScsIHtjYXRlZ29yeU5hbWU6IGdldENhdGVnb3J5TmFtZSgkaXRlbSksaXRlbUNvbnRlbnQsIGlzRG9uZTogJGNoZWNrQm94LmNoZWNrZWR9KTtcbiAgICB9IFxuXG4gICAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICAgICAgLy8gQ2F0ZWdvcmllc1xuICAgICAgICAkYWRkQ2F0ZWdvcnlCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgICAgICAgICBQdWJTdWIucHVibGlzaCgnYWRkQ2F0ZWdvcnknLCBwcm9tcHQoJ0VudGVyJykpO1xuICAgICAgICB9KVxuICAgICAgICBQdWJTdWIuc3Vic2NyaWJlKCdjYXRlZ29yeUFkZGVkJywgYWRkQ2F0ZWdvcnlET00pO1xuXG4gICAgICAgIC8vIEl0ZW1zXG4gICAgICAgICRhZGRJdGVtQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2F0ZWdvcnlOYW1lID0gJGN1cnJlbnRBY3RpdmUuZmlyc3RDaGlsZC50ZXh0Q29udGVudDtcbiAgICAgICAgICAgIGNvbnN0IGl0ZW1Db250ZW50ID0gcHJvbXB0KCdFbnRlcicpO1xuICAgICAgICAgICAgUHViU3ViLnB1Ymxpc2goJ2FkZEl0ZW0nLCB7Y2F0ZWdvcnlOYW1lLCBpdGVtQ29udGVudH0pO1xuICAgICAgICB9KVxuICAgICAgICBQdWJTdWIuc3Vic2NyaWJlKCdjYXRlZ29yeUl0ZW1zTG9hZGVkJywgc2hvd0l0ZW1zKTtcbiAgICAgICAgUHViU3ViLnN1YnNjcmliZSgnaXRlbUFkZGVkJywgYWRkSXRlbURPTSk7XG4gICAgICAgIFxuXG4gICAgICAgIC8vRGVmYXVsdHNcbiAgICAgICAgUHViU3ViLnB1Ymxpc2goJ2FkZENhdGVnb3J5JywgJ0FsbCcpO1xuICAgICAgICBQdWJTdWIucHVibGlzaCgnYWRkQ2F0ZWdvcnknLCAnUmFuZG9tJyk7XG4gICAgICAgIFB1YlN1Yi5wdWJsaXNoKCdhZGRDYXRlZ29yeScsICdDYXRlZ29yaWVzJyk7XG5cbiAgICAgICAgc2V0QWN0aXZlKCRjYXRlZ29yeUNvbnRhaW5lci5maXJzdEVsZW1lbnRDaGlsZCk7ICAgICAgICBcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBpbml0LFxuICAgICAgICBzZXRBY3RpdmUsXG4gICAgfTtcbn0pKCk7XG5cbmV4cG9ydCBkZWZhdWx0IFVJO1xuXG5cblxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tIFwiLi9tb2R1bGVzL3B1YnN1YlwiO1xuaW1wb3J0IFVJIGZyb20gXCIuL21vZHVsZXMvVUlcIjtcbmltcG9ydCBDYXRlZ29yeSBmcm9tIFwiLi9tb2R1bGVzL2NhdGVnb3J5XCJcblxuY29uc3QgQ2F0ZWdvcnlDb250cm9sbGVyID0gKCgpID0+IHtcblxuICAgIC8vIENhdGVnb3J5XG5cbiAgICBjb25zdCBjYXRlZ29yaWVzID0gW107XG5cbiAgICBjb25zdCBnZXRDYXRlZ29yeSA9IChjYXRlZ29yeU5hbWUpID0+IHtcbiAgICAgICAgcmV0dXJuIGNhdGVnb3JpZXMuZmluZChjYXQgPT4gY2F0LmdldE5hbWUoKSA9PT0gY2F0ZWdvcnlOYW1lKTtcbiAgICB9XG4gICAgXG4gICAgY29uc3QgYWRkQ2F0ZWdvcnkgPSAoY2F0ZWdvcnlOYW1lKSA9PiB7XG4gICAgICAgIGlmIChnZXRDYXRlZ29yeShjYXRlZ29yeU5hbWUpKSB7XG4gICAgICAgICAgICBhbGVydCgnVGhpcyBjYXRlZ29yeSBhbHJlYWR5IGV4aXN0cyEnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYXQgPSBDYXRlZ29yeShjYXRlZ29yeU5hbWUpO1xuICAgICAgICBjYXRlZ29yaWVzLnB1c2goY2F0KTtcbiAgICAgICAgUHViU3ViLnB1Ymxpc2goJ2NhdGVnb3J5QWRkZWQnLCBjYXQpO1xuICAgIH1cblxuICAgIGNvbnN0IHJlbW92ZUNhdGVnb3J5ID0gKGNhdGVnb3J5TmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IGNhdGVnb3JpZXMuaW5kZXhPZihnZXRDYXRlZ29yeShjYXRlZ29yeU5hbWUpKTtcbiAgICAgICAgY2F0ZWdvcmllcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cblxuICAgIC8vIEl0ZW1zXG5cbiAgICBjb25zdCBnZXRJdGVtcyA9IChjYXRlZ29yeU5hbWUpID0+IHtcbiAgICAgICAgbGV0IGl0ZW1zID0gW107XG4gICAgICAgIGlmIChjYXRlZ29yeU5hbWUgPT09IGNhdGVnb3JpZXNbMF0uZ2V0TmFtZSgpKSB7XG4gICAgICAgICAgICBjYXRlZ29yaWVzLm1hcChjYXQgPT4gY2F0LmdldEl0ZW1zKCkubWFwKGl0ZW0gPT4gaXRlbXMucHVzaChpdGVtKSkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaXRlbXMgPSBnZXRDYXRlZ29yeShjYXRlZ29yeU5hbWUpLmdldEl0ZW1zKCk7XG4gICAgICAgIFB1YlN1Yi5wdWJsaXNoKCdjYXRlZ29yeUl0ZW1zTG9hZGVkJywgaXRlbXMpO1xuICAgIH1cblxuICAgIGNvbnN0IGFkZEl0ZW0gPSAoe2NhdGVnb3J5TmFtZSwgaXRlbUNvbnRlbnR9KSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBnZXRDYXRlZ29yeShjYXRlZ29yeU5hbWUpLmFkZEl0ZW0oaXRlbUNvbnRlbnQsIGNhdGVnb3J5TmFtZSk7IC8vIEFkZCB0byBIb21lXG4gICAgICAgIFB1YlN1Yi5wdWJsaXNoKCdpdGVtQWRkZWQnLCBpdGVtKTtcbiAgICB9XG5cbiAgICBjb25zdCByZW1vdmVJdGVtID0gKHtjYXRlZ29yeU5hbWUsIGl0ZW1Db250ZW50fSkgPT4ge1xuICAgICAgICBnZXRDYXRlZ29yeShjYXRlZ29yeU5hbWUpLnJlbW92ZUl0ZW0oaXRlbUNvbnRlbnQpO1xuICAgIH1cblxuICAgIGNvbnN0IHRvZ2dsZURvbmUgPSAoe2NhdGVnb3J5TmFtZSwgaXRlbUNvbnRlbnR9KSA9PiB7XG4gICAgICAgIGdldENhdGVnb3J5KGNhdGVnb3J5TmFtZSkudG9nZ2xlRG9uZShpdGVtQ29udGVudCk7XG4gICAgfVxuXG4gICAgY29uc3QgaW5pdCA9ICgpID0+IHtcbiAgICAgICAgUHViU3ViLnN1YnNjcmliZSgnYWRkQ2F0ZWdvcnknLCBhZGRDYXRlZ29yeSk7XG4gICAgICAgIFB1YlN1Yi5zdWJzY3JpYmUoJ3JlbW92ZUNhdGVnb3J5JywgcmVtb3ZlQ2F0ZWdvcnkpO1xuXG4gICAgICAgIFB1YlN1Yi5zdWJzY3JpYmUoJ2NhdGVnb3J5QWN0aXZlJywgZ2V0SXRlbXMpO1xuICAgICAgICBQdWJTdWIuc3Vic2NyaWJlKCdhZGRJdGVtJywgYWRkSXRlbSk7XG4gICAgICAgIFB1YlN1Yi5zdWJzY3JpYmUoJ3JlbW92ZUl0ZW0nLCByZW1vdmVJdGVtKTtcbiAgICAgICAgUHViU3ViLnN1YnNjcmliZSgndG9nZ2xlRG9uZScsIHRvZ2dsZURvbmUpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIGluaXQsXG4gICAgfTtcbn0pKCk7XG5cbkNhdGVnb3J5Q29udHJvbGxlci5pbml0KCk7XG5VSS5pbml0KCk7XG5cblxuXG5cblxuXG5cblxuIiwiaW1wb3J0IFB1YlN1YiBmcm9tIFwiLi9wdWJzdWJcIjtcblxuY29uc3QgSXRlbSA9IChpc0RvbmUsIGNvbnRlbnQsIGNhdGVnb3J5TmFtZSkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGlzRG9uZSxcbiAgICAgICAgY29udGVudCxcbiAgICAgICAgY2F0ZWdvcnlOYW1lLFxuICAgIH07XG59XG5cbmNvbnN0IENhdGVnb3J5ID0gKGNhdGVnb3J5TmFtZSkgPT4ge1xuICAgIGxldCBuYW1lID0gY2F0ZWdvcnlOYW1lO1xuICAgIGxldCBpdGVtcyA9IFtdO1xuXG4gICAgY29uc3QgX2dldEl0ZW0gPSAoaXRlbUNvbnRlbnQpID0+ICBpdGVtcy5maW5kKGl0ZW0gPT4gaXRlbS5jb250ZW50ID09PSBpdGVtQ29udGVudCk7XG4gICAgY29uc3QgZ2V0TmFtZSA9ICgpID0+IG5hbWU7XG5cbiAgICBjb25zdCBhZGRJdGVtID0gKGl0ZW1Db250ZW50LCBjYXRlZ29yeU5hbWUpID0+IHtcbiAgICAgICAgY29uc3QgaXRlbSA9IEl0ZW0oZmFsc2UsIGl0ZW1Db250ZW50LCBjYXRlZ29yeU5hbWUpO1xuICAgICAgICBpdGVtcy5wdXNoKGl0ZW0pO1xuICAgICAgICByZXR1cm4gaXRlbTtcbiAgICB9XG5cbiAgICBjb25zdCByZW1vdmVJdGVtID0gKGl0ZW1Db250ZW50KSA9PiB7XG4gICAgICAgIGNvbnN0IGl0ZW0gPSBfZ2V0SXRlbShpdGVtQ29udGVudCk7XG4gICAgICAgIGlmIChpdGVtID09IHVuZGVmaW5lZCkgcmV0dXJuIG51bGw7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gaXRlbXMuaW5kZXhPZihpdGVtKTtcbiAgICAgICAgaXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgcmV0dXJuIGl0ZW07XG4gICAgfVxuXG4gICAgY29uc3QgdG9nZ2xlRG9uZSA9IChpdGVtQ29udGVudCkgPT4ge1xuICAgICAgICBjb25zdCBpdGVtID0gX2dldEl0ZW0oaXRlbUNvbnRlbnQpO1xuICAgICAgICBpdGVtLmlzRG9uZSA9ICFpdGVtLmlzRG9uZTtcbiAgICB9XG5cbiAgICBjb25zdCBnZXRJdGVtcyA9ICgpID0+IGl0ZW1zO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgZ2V0TmFtZSxcbiAgICAgICAgYWRkSXRlbSxcbiAgICAgICAgcmVtb3ZlSXRlbSxcbiAgICAgICAgdG9nZ2xlRG9uZSxcbiAgICAgICAgZ2V0SXRlbXMsXG4gICAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2F0ZWdvcnk7Il0sIm5hbWVzIjpbIl9ldmVudHMiLCJjaGVja0V2ZW50IiwiZXZlbnROYW1lIiwiZXZlbnQiLCJmaW5kIiwiZ2V0TmFtZSIsIm5hbWUiLCJoYW5kbGVycyIsImFkZEhhbmRsZXIiLCJoYW5kbGVyIiwicHVzaCIsImludm9rZUhhbmRsZXJzIiwiZXZlbnRBcmdzIiwiZm9yRWFjaCIsImZuIiwiX0V2ZW50IiwicHVibGlzaCIsInN1YnNjcmliZSIsIlVJIiwiY3JlYXRlSHRtbEVsZW1lbnQiLCJ0eXBlIiwiY2xhc3NBcnJheSIsImNvbnRlbnQiLCJlbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2xzIiwiY2xhc3NMaXN0IiwiYWRkIiwidGV4dENvbnRlbnQiLCJnZXRDYXRlZ29yeU5hbWUiLCIkZWxlbWVudCIsInZhbHVlIiwic3BsaXQiLCIkY2F0ZWdvcnlDb250YWluZXIiLCJxdWVyeVNlbGVjdG9yIiwiJGFkZENhdGVnb3J5QnRuIiwiJGFjdGl2ZUNhdGVnb3J5IiwiZ2V0RWxlbWVudEJ5SWQiLCIkY3VycmVudEFjdGl2ZSIsInNldEFjdGl2ZSIsIiRjYXRlZ29yeSIsInJlbW92ZSIsImNhdGVnb3J5TmFtZSIsImFkZENhdGVnb3J5RE9NIiwiY2F0ZWdvcnkiLCIkbmV3Q2F0ZWdvcnkiLCIkY2F0IiwiYXBwZW5kQ2hpbGQiLCJjaGlsZEVsZW1lbnRDb3VudCIsIm5ld0NhdGVnb3J5IiwiJGRlbGV0ZUJ0biIsImxhc3RDaGlsZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJlIiwic3RvcFByb3BhZ2F0aW9uIiwicmVtb3ZlQ2F0ZWdvcnlET00iLCJwYXJlbnROb2RlIiwiYWRkQ2F0ZWdvcnlMaXN0ZW5lciIsIiRmaXJzdENhdGVnb3J5IiwiZmlyc3RFbGVtZW50Q2hpbGQiLCIkaXRlbUNvbnRhaW5lciIsIiRhZGRJdGVtQnRuIiwic2hvd0l0ZW1zIiwiaXRlbXMiLCJtYXAiLCJpdGVtIiwiYWRkSXRlbURPTSIsIiRuZXdJdGVtIiwiJGl0ZW0iLCIkY2hlY2tCb3giLCJpc0RvbmUiLCJjaGVja2VkIiwibmV3SXRlbURPTSIsIml0ZW1FbGVtZW50cyIsIkFycmF5IiwiZnJvbSIsImNoaWxkcmVuIiwiaXRlbUNvbnRlbnQiLCJlbCIsImNvbnRhaW5zIiwicmVtb3ZlSXRlbURPTSIsInRvZ2dsZURvbmVET00iLCJhZGRJdGVtTGlzdGVuZXIiLCJpbml0IiwicHJvbXB0IiwiZmlyc3RDaGlsZCIsImNhdGVnb3JpZXMiLCJnZXRDYXRlZ29yeSIsImNhdCIsImFkZENhdGVnb3J5IiwiYWxlcnQiLCJfZ2V0SXRlbSIsImFkZEl0ZW0iLCJJdGVtIiwicmVtb3ZlSXRlbSIsInVuZGVmaW5lZCIsImluZGV4IiwiaW5kZXhPZiIsInNwbGljZSIsInRvZ2dsZURvbmUiLCJnZXRJdGVtcyIsInJlbW92ZUNhdGVnb3J5Il0sInNvdXJjZVJvb3QiOiIifQ==